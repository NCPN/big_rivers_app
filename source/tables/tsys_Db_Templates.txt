ID	Version	IsSupported	FieldCheck	FieldOK	Context	Syntax	TemplateName	DataScope	Params	Template	Remarks	Dependencies	EffectiveDate	RetireDate	CreateDate	CreatedBy_ID	LastModified	LastModifiedBy_ID
1	1	1	0		s_get_parks	SQL	s_get_parks			SELECT ParkCode FROM Park WHERE IsActiveForProtocol = 1;			5/18/2016					
2	1	1	0		s_park_list	SQL	s_park_list			SELECT ID, ParkCode FROM Park WHERE IsActiveForProtocol = 1 ORDER BY ParkCode ASC;			5/18/2016					
4	1	1	0		s_river_list	SQL	s_river_list			PARAMETERS pkcode TEXT(4);\nSELECT River.ID, Segment\nFROM River LEFT JOIN Park AS p ON p.ID = River.Park_ID\nWHERE ParkCode = [pkcode]\nORDER BY Segment;	Used to get river list for breadcrumb		5/19/2016					
5	1	1	0		s_site_list_active	SQL	s_site_list_active		ParkCode:string	PARAMETERS pkcode TEXT(4), seg TEXT(10);\nSELECT s.ID, SiteName + ' (' + SiteCode + ')' AS Site \nFROM ((Site s\nLEFT JOIN Park p ON p.ID = s.Park_ID)\nLEFT JOIN River r ON r.ID = s.River_ID)\nWHERE ParkCode = [pkcode]\nAND r.Segment = [seg]\nAND s.IsActiveForProtocol = 1 \nORDER BY SiteName ASC;	Used for breadcrumb		5/19/2016				9/22/2016	
6	1	1	0		s_feature_list	SQL	s_feature_list		pkcode:string	PARAMETERS pkcode TEXT(4);\nSELECT f.ID, f.Feature, loc.LocationName, f.Location_ID FROM ((((Feature f\nLEFT JOIN Location loc ON loc.ID = f.Location_ID)\nLEFT JOIN Site_Feature sf ON sf.Feature_ID = f.ID )\nLEFT JOIN Site s ON s.ID = sf.Site_ID )\nLEFT JOIN Park p ON p.ID = s.Park_ID )\nWHERE p.ParkCode = [pkcode]\nAND s.IsActiveForProtocol = 1 \nORDER BY f.Feature ASC;	Used to populate Feature list form		5/19/2016					
7	1	1	0		s_contact_list	SQL	s_contact_list			SELECT DISTINCT ID, FirstName + ' ' + LastName as Name FROM Contact;	Used in observer/recorder dropdowns		5/19/2016					
8	1	1	0		s_tagline	SQL	s_tagline		SourceType:string|SourceID:integer	SELECT * FROM Tagline \nWHERE LineDistanceSource = '[SourceType]' AND \nLineDistanceSource_ID = [SourceID];			5/19/2016					
9	1	1	0		s_vegwalk	SQL	s_vegwalk		strFamily:string|strSpecies:string	SELECT [strFamily] AS Family, [strSpecies] AS Species, LU_Code, \n1 AS SeqNum \nFROM tlu_NCPN_Plants \nWHERE Master_Family NOT IN ('','Unknown') \nUNION ALL \nSELECT [strFamily] AS Family, [strSpecies] AS Species, LU_Code, \n2 AS SeqNum \nFROM tlu_NCPN_Plants \nWHERE Master_Family = 'Unknown'\nORDER BY SeqNum ASC;			5/24/2016					
10	1	1	0		s_protocol_info	SQL	s_protocol_info		strWHERE:string	SELECT ProtocolName, Version, EffectiveDate, RetireDate, LastModified FROM Protocol \n[strWHERE];			5/25/2016					
12	1	1	0		s_get_river_segments	SQL	s_get_river_segments		ParkCode:string	SELECT Segment FROM River \nLEFT JOIN Park ON Park.ID = River.Park_ID \nWHERE ParkCode LIKE '[ParkCode]';			5/25/2016					
13	1	1	0		s_sop_metadata	SQL	s_sop_metadata		area:string	SELECT Code, SOPnumber, Version, EffectiveDate  FROM SOP \nWHERE LCASE(Code) = '[area]'\nAND RetireDate IS NULL;			5/26/2016					
14	1	1	0		s_transducer_bd	SQL	s_transducer_bd			SELECT 'BD' AS Timing, ParkCode, Segment, SiteCode, SiteName, \nLogger.ID, SensorType, SensorNumber, SamplingOrder \nFROM (((Logger \nLEFT JOIN Site ON Site.ID = Logger.Site_ID) \nLEFT JOIN River ON River.ID = Site.River_ID) \nLEFT JOIN Park ON Park.ID = River.Park_ID)			5/27/2016				2/16/2017	1
15	1	1	0		s_transducer_number	SQL	s_transducer_number			xx			5/29/2016					
17	1	1	0		s_form_edit	SQL	s_form_edit		tbl:string|id:long	SELECT * FROM [tbl] WHERE ID = [id];	used in populateform() for edits		6/1/2016					
18	1	1	0		d_form_record	SQL	d_form_record		tbl:string|id:long	DELETE t.* \nFROM [tbl] t \nWHERE t.ID \nIN (SELECT TOP 1 ID FROM [tbl] WHERE ID = [id]);	used in deleting records via list forms/subforms, limits deletion to 1 record only		6/1/2016					
19	1	1	0		i_tagline_record	SQL	i_tagline_record		LineDistSource:string|LineDistSourceID:long|LineDistType:string|LineDistance:double|HeightType:string|Height:double	INSERT INTO Tagline(LineDistanceSource, LineDistanceSource_ID, \nLineDistanceType, LineDistance_m, HeightType, Height_cm) VALUES \n('[LineDistSource]',[LineDistSourceID],\n'[LineDistType]',[LineDistance],'[HeightType]',[Height]);	used in inserting tagline records		6/1/2016					
20	1	1	0		u_tagline_record	SQL	u_tagline_record		LineDistSource:string|LineDistSourceID:long|LineDistType:string|LineDistance:double|HeightType:string|Height:double|ID:long	UPDATE Tagline \nSET LineDistanceSource = '[LineDistSource]', \nLineDistanceSource_ID = [LineDistSourceID], \nLineDistanceType = '[LineDistType]', \nLineDistance_m = [LineDistance], \nHeightType = '[HeightType]', \nHeight_cm = [Height]\nWHERE ID = [ID];	used in updating tagline records		6/1/2016					
21	1	1	0		i_event_record	SQL	i_event_record		ProtocolID:long|SiteID:long|LocationID:long|StartDate:string	INSERT INTO Event(Protocol_ID, Site_ID, Location_ID, StartDate) VALUES ([ProtocolID],[SiteID],\n[LocationID],#[StartDate]#);								
22	1	1	0		i_record_action	SQL	i_record_action		RefTable:string|RefID:long|ID:long|action:string|ActionDate:string	PARAMETERS RefTable TEXT(25), RefID LONG, ID LONG, Activity TEXT(2), ActionDate DATETIME;\nINSERT INTO RecordAction(ReferenceType, Reference_ID, Contact_ID, Activity, ActionDate) VALUES \n([RefTable],[RefID],\n[ID],[Activity], [ActionDate]);	Add record action record for data entry, etc.		7/26/2016					
23	1	1	0		qsys_Linked_tables_not_in_tsys_Link_Tables	SQL	qsys_Linked_tables_not_in_tsys_Link_Tables			SELECT MSysObjects.Name AS CurrTable, IIf([Type]=4,ParseConnectionStr([Connect]),ParseFileName([Database])) AS CurrDb, IIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) AS CurrServer, IIf([Type]=6,[Database]) AS CurrPath, IIf([Type]=4,True,False) AS ODBC\nFROM MSysObjects LEFT JOIN tsys_Link_Tables ON MSysObjects.Name = tsys_Link_Tables.LinkTable\nWHERE (((MSysObjects.Name) Not Like "~*") AND ((tsys_Link_Tables.LinkTable) Is Null) AND ((MSysObjects.Type) In (4,6)));	Table linking checks		6/4/2016					
24	1	1	0		qsys_Linked_dbs_not_in_tsys_Link_Dbs	SQL	qsys_Linked_dbs_not_in_tsys_Link_Dbs			INSERT INTO tsys_Link_Dbs ( Link_db, Server, File_path, Is_ODBC, Backups )\nSELECT qsys_Linked_tables_not_in_tsys_Link_Tables.CurrDb, qsys_Linked_tables_not_in_tsys_Link_Tables.CurrServer, qsys_Linked_tables_not_in_tsys_Link_Tables.CurrPath, qsys_Linked_tables_not_in_tsys_Link_Tables.ODBC, Not ([ODBC]) AS Backup\nFROM qsys_Linked_tables_not_in_tsys_Link_Tables LEFT JOIN tsys_Link_Dbs ON qsys_Linked_tables_not_in_tsys_Link_Tables.CurrDb = tsys_Link_Dbs.Link_db\nWHERE (((tsys_Link_Dbs.Link_db) Is Null))\nGROUP BY qsys_Linked_tables_not_in_tsys_Link_Tables.CurrDb, qsys_Linked_tables_not_in_tsys_Link_Tables.CurrServer, qsys_Linked_tables_not_in_tsys_Link_Tables.CurrPath, qsys_Linked_tables_not_in_tsys_Link_Tables.ODBC, Not ([ODBC]);	Table linking checks		6/4/2016					
25	1	1	0		qsys_Linked_dbs_without_table_records	SQL	qsys_Linked_dbs_without_table_records			SELECT tsys_Link_Dbs.*\nFROM tsys_Link_Dbs LEFT JOIN tsys_Link_Tables ON tsys_Link_Dbs.Link_db = tsys_Link_Tables.LinkDb\nWHERE (((tsys_Link_Tables.Link_db) Is Null));	Table linking checks		6/4/2016					
26	1	1	0		qsys_Linked_tables_mismatched_info	SQL	qsys_Linked_tables_mismatched_info		Type:string|Connect:string|Database:string	SELECT MSysObjects.Name AS CurrTable, tsys_Link_Tables.LinkTable, MSysObjects.Type, tsys_Link_Dbs.[IsODBC], IIf([Type]=4,ParseConnectionStr([Connect]),ParseFileName([Database])) AS CurrDb, tsys_Link_Tables.[LinkDb], IIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) AS CurrServer, tsys_Link_Dbs.Server, MSysObjects.Database AS CurrPath, tsys_Link_Dbs.[FilePath]\nFROM (tsys_Link_Dbs INNER JOIN tsys_Link_Tables ON tsys_Link_Dbs.[LinkDb]=tsys_Link_Tables.[LinkDb]) INNER JOIN MSysObjects ON MSysObjects.Name = tsys_Link_Tables.LinkTable\nWHERE MSysObjects.Type In (4,6)\nAND\n(\n(\nIIf([Type]=4,ParseConnectionStr([Connect]),ParseFileName([Database]))<>tsys_Link_Tables.[LinkDb]\nOR\nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER='))<>[Server] \nOR\nMSysObjects.Database<>[FilePath]\n)\nOR\n(\nMSysObjects.Type=4\nAND\ntsys_Link_Dbs.[IsODBC]=False\n)\nOR\n(\nMSysObjects.Type=6 \nAND\ntsys_Link_Dbs.[IsODBC]=True\n)\nOR\n(\nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) IS NULL\nAND \ntsys_Link_Dbs.Server IS NOT NULL\n)\nOR\n( \nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) IS NOT NULL\nAND\ntsys_Link_Dbs.Server IS NULL\n) \nOR\n(\nMSysObjects.Database IS NULL\nAND \ntsys_Link_Dbs.[FilePath] IS NOT NULL\n)\n\nOR \n(\nMSysObjects.Database IS NOT NULL\nAND\ntsys_Link_Dbs.[FilePath] IS NULL\n)\n\n);	Table linking checks		6/4/2016					
27	1	1	0		qsys_Linked_tables_mismatched_info_dbs	SQL	qsys_Linked_tables_mismatched_info_dbs		Type:string|Connect:string|Database:string|FilePath:string|Server:string	SELECT MSysObjects.Name AS CurrTable, tsys_Link_Tables.LinkTable, MSysObjects.Type, tsys_Link_Dbs.[IsODBC], IIf([Type]=4,ParseConnectionStr([Connect]),ParseFileName([Database])) AS CurrDb, tsys_Link_Tables.[LinkDb], IIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) AS CurrServer, tsys_Link_Dbs.Server, MSysObjects.Database AS CurrPath, tsys_Link_Dbs.[FilePath]\nFROM (tsys_Link_Dbs INNER JOIN tsys_Link_Tables ON tsys_Link_Dbs.[LinkDb]=tsys_Link_Tables.[LinkDb]) INNER JOIN MSysObjects ON MSysObjects.Name = tsys_Link_Tables.LinkTable\nWHERE MSysObjects.Type In (4,6)\nAND\n(\n(\nIIf([Type]=4,ParseConnectionStr([Connect]),ParseFileName([Database]))<>tsys_Link_Tables.[LinkDb]\nOR\nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER='))<>[Server] \nOR\nMSysObjects.Database<>[FilePath]\n)\nOR\n(\nMSysObjects.Type=4\nAND\ntsys_Link_Dbs.[IsODBC]=False\n)\nOR\n(\nMSysObjects.Type=6 \nAND\ntsys_Link_Dbs.[IsODBC]=True\n)\nOR\n(\nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) IS NULL\nAND \ntsys_Link_Dbs.Server IS NOT NULL\n)\nOR\n( \nIIf([Type]=4,ParseConnectionStr([Connect],'SERVER=')) IS NOT NULL\nAND\ntsys_Link_Dbs.Server IS NULL\n) \nOR\n(\nMSysObjects.Database IS NULL\nAND \ntsys_Link_Dbs.[FilePath] IS NOT NULL\n)\n\nOR \n(\nMSysObjects.Database IS NOT NULL\nAND\ntsys_Link_Dbs.[FilePath] IS NULL\n)\n\n);	Table linking checks		6/4/2016	6/20/2016				
28	1	1	0		qsys_Linked_tables_not_in_MSysObjects	SQL	qsys_Linked_tables_not_in_MSysObjects			SELECT tsys_Link_Tables.LinkTable, tsys_Link_Tables.LinkDb, tsys_Link_Dbs.Server, tsys_Link_Dbs.FilePath\nFROM tsys_Link_Dbs INNER JOIN (MSysObjects RIGHT JOIN tsys_Link_Tables ON MSysObjects.Name = tsys_Link_Tables.LinkTable) ON tsys_Link_Dbs.LinkDb = tsys_Link_Tables.LinkDb\nWHERE (((MSysObjects.Name) Is Null));	Table linking checks		6/4/2016					
30	1	1	0		s_msysobjects_connect	SQL	s_msysobjects_connect		Connect:string|LinkDb:string	SELECT Name, Connect, \nParseConnectionStr([Connect]) AS CurrDb \nFROM MSysObjects \nWHERE ((MSysObjects.Name) Not Like '~*') AND \n((MSysObjects.Type) = 4) AND \n((ParseConnectionStr([Connect]) = '[LinkDb]'));	Used in btnTestODBC_click		6/5/2016					
31	1	1	0		u_tsys_Link_Files_new_db	SQL	u_tsys_Link_Files_new_db		NewPath:string|NewDb:string|DbName:string	UPDATE tsys_Link_Files SET Link_File_Path = '[NewPath]', \nLink_file_name = '[NewDb]'\nWHERE Link_file_name = '[DbName]';	Used in btnUpdateLinks_Click		6/5/2016					
32	1	1	0		i_tsys_Logins_odbc	SQL	i_tsys_Logins_odbc		username:string|action:string	INSERT INTO dbo.tsys_Logins\nSELECT GETDATE() AS TimeStamp, '[username]' AS UserName, \n'[action]' AS ActionTaken;	Used in AppSetup [mod_Initialize_App]		6/5/2016					
33	1	1	0		i_tsys_Logins	SQL	i_tsys_Logins		username:string|action:string	INSERT INTO tsys_Logins ( UserName, ActionTaken ) SELECT\n'[username]' AS User, '[action]' AS Action;	Used in AppSetup [mod_Initialize_App]		6/5/2016					
34	1	1	0		d_tsys_link_tables	SQL	d_tsys_link_tables		linktbl:string	DELETE * \nFROM tsys_Link_Tables \nWHERE ([LinkTable]='[linktbl]');	Used in VerifyLinkTableInfo [mod_Linked_Tables]		6/5/2016					
35	1	1	0		i_tsys_link_tables	SQL	i_tsys_link_tables			INSERT INTO tsys_Link_Tables \n( LinkTable, LinkDb ) \nSELECT qsys_Linked_tables_not_in_tsys_Link_Tables.CurrTable, \nqsys_Linked_tables_not_in_tsys_Link_Tables.CurrDb \nFROM qsys_Linked_tables_not_in_tsys_Link_Tables;	Used in VerifyLinkTableInfo [mod_Linked_Tables]		6/5/2016					
36	1	1	0		s_tsys_link_tables_no_description	SQL	s_tsys_link_tables_no_description			SELECT * FROM tsys_Link_Tables \nWHERE tsys_Link_Tables.DescriptionText Is Null;	Used in VerifyLinkTableInfo [mod_Linked_Tables]		6/5/2016					
37	1	1	0		u_tsys_link_tables_description	SQL	u_tsys_link_tables_description		descr:string|tbl:string	UPDATE tsys_Link_Tables \nSET tsys_Link_Tables.DescriptionText='[descr]'\nWHERE (((tsys_Link_Tables.LinkTable)='[tbl]'));	Used in VerifyLinkTableInfo [mod_Linked_Tables]		6/5/2016					
38	1	1	0		d_tsys_link_tables_by_db	SQL	d_tsys_link_tables_by_db		link_db:string	DELETE * FROM tsys_Link_Dbs \nWHERE ([LinkDb]='[link_db]');	Used in VerifyLinkTableInfo [mod_Linked_Tables]		6/5/2016					
39	1	1	0		s_msysobjects_except_deleted	SQL	s_msysobjects_except_deleted			SELECT MSysObjects.Name, MSysObjects.Database \nFROM MSysObjects \nWHERE ((MSysObjects.Name) Not Like '~*') AND ((MSysObjects.Type) In (4,6)) \nORDER BY MSysObjects.Name;	Used in VerifyLinks [mod_Linked_Tables]		6/5/2016					
40	1	1	0		u_tsys_link_dbs_filepath	SQL	u_tsys_link_dbs_filepath		curDbPath:string|curDb:string	UPDATE tsys_Link_Dbs \nSET FilePath = '[curDbPath]'\nWHERE LinkDb = '[curDb]';	Used in FixLinkedDatabase [mod_Linked_Tables]		6/5/2016					
41	1	1	0		s_tsys_link_tables_by_dbname	SQL	s_tsys_link_tables_by_dbname		dbName:string	SELECT * FROM tsys_Link_Tables \nWHERE [tsys_Link_Tables]![LinkDb] = '[DbName]';	Used in RefreshLinks[mod_Linked_Tables]		6/5/2016					
42	1	1	0		s_access_level	SQL	s_access_level		lvl:string	PARAMETERS lvl TEXT(15);\nSELECT ID FROM Access\nWHERE LCASE(AccessLevel) = [lvl];	Used in AccessID() [mod_User]		6/7/2016					
43	1	1	0		i_contact	SQL	i_contact_old		FirstName:string|LastName:string|email:string|org:string|MI:string|username:string|WorkPhone:string|WorkExt:string|position:string|IsActive:byte	INSERT INTO Contact(FirstName, LastName, Email, Organization,\nMiddleInitial, Username, WorkPhone, WorkExtension, PositionTitle, IsActive) \nVALUES\n('[FirstName]','[LastName]','\n[email]','[org]','\n[MI]','[username]','\n[WorkPhone]','[WorkExt]','[position]',[IsActive]);	Used in SaveToDb [cls_Person]		6/7/2016					
44	1	1	0		i_contact_access	SQL	i_contact_access		contactID:long|accessID:long	PARAMETERS ContactID INT, AccessID INT;\nINSERT INTO Contact_Access (Contact_ID, Access_ID)\nVALUES\n([ContactID],[AccessID]);	Used in SaveToDb[cls_Person]		6/7/2016					
45	1	1	0		i_usys_temp_table	SQL	i_usys_temp_table		i:integer	INSERT INTO usys_temp_table(Num) VALUES ([i]);	Used in CreateTempTable[mod_Db]		6/8/2016					
47	1	1	0		s_usys_temp_table	SQL	s_usys_temp_table			SELECT * FROM usys_temp_table;	Used in reports w/o underlying dataset that require detail section duplication		6/8/2016					
48	1	1	0		d_usys_temp_table	SQL	d_usys_temp_table			DELETE FROM usys_temp_table;	Clears usys_temp_table  used in CreateTempTable[mod_Db]		6/8/2016					
49	1	1	0		s_cover_species_by_year	SQL	s_cover_species_by_year		SampleYear:integer|ParkCode:string|RiverSegment:string|SpeciesType:string	SELECT DISTINCT ParkCode, Segment, Year(StartDate) AS LastYr,\nMaster_Species, mp.LU_Code, sp.PercentCover \nFROM (((((Park p\nLEFT OUTER JOIN River r ON r.Park_ID = p.ID)\nLEFT OUTER JOIN Site s ON s.Park_ID = p.ID)\nLEFT OUTER JOIN Event e ON e.Site_ID = s.ID)\nLEFT OUTER JOIN VegPlot v ON v.Event_ID = e.ID)\nLEFT OUTER JOIN [SpeciesType] sp ON sp.VegPlot_ID = v.ID)\nLEFT OUTER JOIN tlu_NCPN_Plants mp ON mp.Master_PLANT_Code = sp.Master_PLANT_Code\nWHERE\nYear(StartDate) = [SampleYear]\nAND\nParkCode = '[ParkCode]'\nAND\nSegment = '[RiverSegment]'\nAND s.IsActiveForProtocol = 1\nAND p.IsActiveForProtocol = 1\nORDER BY PercentCover DESC,Master_Species ASC;	Used as initial dataset for WCC, URC, ARS species lists.		6/10/2016					
50	1	1	0		s_plant_species_by_lucode	SQL	s_plant_species_by_lucode		lucode:string	SELECT DISTINCT TOP 1 Master_Family, Master_PLANT_Code, Master_Species, UT_Family, CO_Family, WY_Family, Utah_PLant_Code,\nUtah_Species, CO_PLANT_Code, Co_Species,\nWy_PLANT_Code, Wy_Species, Master_Common_Name,\nLU_Code, Lifeform, Duration, Nativity\nFROM tlu_NCPN_plants WHERE LU_Code = '[lucode]';	Used in Species.Init(lucode) [cls_Species]		6/11/2016					
51	1	1	0		i_cover_species	SQL	i_cover_species		tbl:string|vegplotID:integer|masterplantcode:string|pctcover:integer	PARAMETERS VegPlotID LONG, MasterPlantCode TEXT(20),\nPctCover INTEGER;\nINSERT INTO tbl (VegPlot_ID, Master_PLANT_Code, PercentCover) VALUES \n([VegPlotID],[MasterPlantCode],[PctCover]);	Used in Init() for species classes: RootedSpecies, WoodyCanopySpecies		6/11/2016				9/26/2016	
52	1	1	0		i_understory_species	SQL	i_understory_species_old		vegplotID:integer|masterplantcode:string|pctcover:integer|isseedling:byte	INSERT INTO UnderstorySpecies(VegPlot_ID, Master_PLANT_Code, PercentCover, IsSeedling) VALUES \n([VegPlotID],'[MasterPlantCode]',\n[PercentCover],[IsSeedling]);	Used in Init() for UnderstorySpecies class		6/11/2016					
53	1	1	0		s_top_cover_species_by_year	SQL	s_top_cover_species_by_year		SampleYear:integer|ParkCode:string|RiverSegment:string|SpeciesType:string	SELECT DISTINCT TOP 15  ParkCode, Segment,\nMaster_Species, mp.LU_Code\nFROM\n(SELECT DISTINCT ParkCode, Segment, Year(StartDate) AS LastYr,\nMaster_Species, mp.LU_Code, sp.PercentCover \nFROM (((((Park p\nLEFT OUTER JOIN River r ON r.Park_ID = p.ID)\nLEFT OUTER JOIN Site s ON s.Park_ID = p.ID)\nLEFT OUTER JOIN Event e ON e.Site_ID = s.ID)\nLEFT OUTER JOIN VegPlot v ON v.Event_ID = e.ID)\nLEFT OUTER JOIN [SpeciesType] sp ON sp.VegPlot_ID = v.ID)\nLEFT OUTER JOIN tlu_NCPN_Plants mp ON mp.Master_PLANT_Code = sp.Master_PLANT_Code\nWHERE\nYear(StartDate) = [SampleYear]\nAND\nParkCode = '[ParkCode]'\nAND\nSegment = '[RiverSegment]'\nAND s.IsActiveForProtocol = 1\nAND p.IsActiveForProtocol = 1\nORDER BY PercentCover DESC,Master_Species ASC)\nWHERE Master_Species <> '' AND mp.LU_Code <> ''\nORDER BY Master_Species ASC;	Used as dataset for WCC, URC, ARS species lists.		6/11/2016					
54	1	1	0		u_contact_isactive_flag	SQL	u_contact_isactive_flag		IsActiveFlag:byte|ID:long	PARAMETERS flag BYTE, cid LONG;\nUPDATE Contact\nSET IsActive = [flag]\nWHERE ID = [cid];	Used to update user active flag		6/20/2016				10/24/2016	
55	1	1	0		s_contact_username_accesslevel	SQL	s_contact_username_accesslevel			SELECT Username, AccessLevel\nFROM ((contact c\nINNER JOIN Contact_Access ca ON ca.Contact_ID = c.ID)\nINNER JOIN Access a ON a.ID = ca.Access_ID);	Used to view username & access level for contacts		6/21/2016					
56	1	1	0		s_contact_username_accesslevel_by_ID	SQL	s_contact_username_accesslevel_by_ID		id:long	SELECT Username, AccessLevel\nFROM ((contact c\nINNER JOIN Contact_Access ca ON ca.Contact_ID = c.ID)\nINNER JOIN Access a ON a.ID = ca.Access_ID)\nWHERE c.ID = [id];	Used to retrieve specific contact's username & access level		6/21/2016					
59	1	1	0		i_contact_new	SQL	i_contact		FirstName:string|LastName:string|email:string|org:string|MI:string|username:string|WorkPhone:string|WorkExt:string|position:string|IsActive:byte	PARAMETERS First TEXT(50), Last TEXT(25), EmailAddress TEXT(50), \nOrg TEXT(50), Login TEXT(75), MI TEXT(4),\nPosition TEXT(50), Phone LONG, Ext INT,\nIsActiveFlag BYTE, IsNPSFlag BYTE; \nINSERT INTO Contact(FirstName, LastName, Email, Organization,\nMiddleInitial, Username, WorkPhone, WorkExtension, PositionTitle, IsActive, IsNPS) \nVALUES\n([First],[Last],\n[EmailAddress],[Org],[MI],[Login],\n[Phone],[Ext],[Position],[IsActiveFlag],[IsNPSFlag]);	Used in SaveToDb [cls_Person]		6/7/2016				11/26/2017	1
60	1	1	0		s_contact_access	SQL	s_contact_access			SELECT *\nFROM ((Contact c\nLEFT JOIN Contact_Access ca ON ca.Contact_ID = c.ID)\nLEFT JOIN Access a ON a.ID = ca.Access_ID) \n;	Used as datasource for Contact form		6/23/2016				10/17/2016	
61	1	1	0		s_access	SQL	s_access			SELECT * FROM Access;	Used as datasource for Contact form user access dropdown		6/23/2016					
62	1	1	0		u_contact	SQL	u_contact			PARAMETERS First TEXT(50), Last TEXT(25), \nEmailAddress TEXT(50), \nOrg TEXT(50), MI TEXT(4), Login TEXT(75), \nPhone LONG, Ext INT,Position TEXT(50), \nIsActiveFlag BYTE, IsNPSFlag BYTE, ContactID LONG; \nUPDATE Contact\nSET\nFirstName = [First], \nLastName = [Last], \nEmail = [EmailAddress], \nOrganization = [Org],\nMiddleInitial = [MI], \nUsername = [Login], \nWorkPhone = [Phone], \nWorkExtension = [Ext], \nPositionTitle = [Position], \nIsActive = [IsActiveFlag], \nIsNPS = [IsNPSFlag]\nWHERE ID = [ContactID];	Used to update contact info from Contact form		6/23/2016				11/26/2017	1
63	1	1	0		u_contact_access	SQL	u_contact_access			PARAMETERS ContactID LONG, AccessID LONG; \nUPDATE Contact_Access\nSET\nAccess_ID = [AccessID]\nWHERE Contact_ID = [ContactID];	Used to update contact's access level from Contact form		6/23/2016				8/29/2016	
64	1	1	0		s_count_tbl	SQL	s_count_tbl		field:string|tbl:string	SELECT COUNT([field]) FROM [tbl];	Used for any counts lookup		6/26/2016					
65	1	1	0		s_location_by_park	SQL	s_location_by_park		parkcode:string	SELECT * FROM location			6/27/2016					
66	1	1	0		i_feature	SQL	i_feature			PARAMETERS LocID LONG, feat TEXT(2),\nDescr TEXT(255), Dirs TEXT(255);\nINSERT INTO Feature\n(Location_ID, Feature, FeatureDescription, FeatureDirections)\nVALUES\n([LocID],[feat],[Descr],[Dirs]);	Used to insert feature records from Feature form		6/27/2016				10/17/2017	
67	1	1	0		u_feature	SQL	u_feature			PARAMETERS FID LONG, LocID LONG, feat TEXT(2),\nDescr TEXT(255), Dirs TEXT(255);\nUPDATE Feature\nSET Location_ID = [LocID], \nFeature = [feat], \nFeatureDescription = [Descr], \nFeatureDirections = [Dirs]\nWHERE \nID = [FID];	Used to update feature records from Feature form		6/27/2016				10/17/2017	
68	1	1	0		i_site_feature	SQL	i_site_feature			PARAMETERS FID LONG, SID LONG;\nINSERT INTO \nSite_Feature (Site_ID, Feature_ID)\nVALUES\n([SID],[FID]);	Used to add site_feature records from Feature form		6/27/2016					
69	1	1	0		i_event	SQL	i_event			PARAMETERS SID LONG, LID LONG, PID LONG, Start DATE;\nINSERT INTO Event (Site_ID, Location_ID, Protocol_ID, StartDate)\nVALUES\n([SID],[LID],[PID],[Start]);	Used to add event records from Event form		6/27/2016					
70	1	1	0		u_event	SQL	u_event			PARAMETERS SID LONG, LID LONG, PID LONG, Start DATE, EID LONG;\nUPDATE Event \nSET Site_ID = [SID], \nLocation_ID = [LID], \nProtocol_ID = [PID], \nStartDate = [Start] \nWHERE ID = [EID]\n;	Used to update event records from Event form		6/27/2016				8/22/2016	
71	1	1	0		s_events_by_park_river	SQL	s_events_by_park_river		pkcode:string|waterway:string	PARAMETERS pkcode Text ( 4 ), waterway Text ( 25 );\nSELECT e.ID, s.SiteCode, s.SiteName, r.Segment, CStr(e.StartDate) + " - " + s.SiteName AS ddEvent\nFROM ((Event AS e INNER JOIN Site AS s ON s.ID = e.Site_ID) INNER JOIN Park AS p ON s.Park_ID = p.ID) INNER JOIN River AS r ON r.ID = s.River_ID\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\nORDER BY s.SiteName, e.StartDate DESC;	Used to retrieve event records for Event List form.		6/27/2016					
72	1	1	0		s_site_by_park_river	SQL	s_site_by_park_river		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT DISTINCT s.ID, s.SiteCode, s.SiteName, s.SiteName + ' (' + s.SiteCode + ')' AS Site\nFROM ((Site s\nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used to populate site dropdown for Event form		6/27/2016					
73	1	1	0		s_location_by_park_river	SQL	s_location_by_park_river		ParkCode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT DISTINCT l.ID, l.LocationName, l.CollectionSourceName, l.LocationType\nFROM ((((Location l\nINNER JOIN Event e ON e.Location_ID = l.ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used to populate location dropdown for Event form		6/27/2016					
74	1	1	0		u_vegtransect	SQL	u_vegtransect			PARAMETERS LocID LONG, EventID LONG, TransectNum TEXT(),\nVisit DATE;\nUPDATE VegTransect\nSET \nLocation_ID = [LocID], \nEvent_ID = [EventID], \nTransectNumber = [TransectNum], \nSampleDate = [Visit]\n;	Used to update VegTransect record via VegTransect form		6/27/2016					
75	1	1	0		i_vegtransect	SQL	i_vegtransect			PARAMETERS LocID LONG, EventID LONG, TransectNum TEXT(),\nVisit DATE;\nINSERT INTO VegTransect(Location_ID, Event_ID, TransectNumber, SampleDate)\nVALUES\n([LocID],[EventID],[TransectNum],[Visit])\n;	Used to insert VegTransect record via VegTransect form		6/27/2016					
76	1	1	0		s_site_code_by_park_river	SQL	s_site_code_by_park_river		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT s.ID, s.SiteCode\nFROM ((Site s \nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used to populate site dropdown for Event form		6/27/2016					
77	1	1	0		s_location_list_by_park_river	SQL	s_location_list_by_park_river		ParkCode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(10);\nSELECT DISTINCT l.ID, l.LocationName, l.CollectionSourceName, l.LocationType\nFROM ((((Location l \nINNER JOIN Event e ON e.Location_ID = l.ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used to populate location dropdown for Event form		6/27/2016					
78	1	1	0		s_events_list_by_park_river	SQL	s_events_list_by_park_river		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT e.ID, e.SiteCode, e.SiteName, r.Segment\nFROM (((Event e \nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used to populate Event list form							
79	1	1	0		s_site_list_by_park_river	SQL	s_site_list_by_park_river		ParkCode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT s.ID, SiteCode, SiteName, SiteDescription, SiteDirections, s.IsActiveForProtocol\nFROM ((Site s\nINNER JOIN Park p ON p.ID = s.Park_ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE\np.ParkCode = [pkcode]\nAND r.River = [waterway]\n;	Used for site list form		6/28/2016					
80	1	1	0		u_site_isactive_flag	SQL	u_site_isactive_flag		IsActiveFlag:byte|ID:long	PARAMETERS flag BYTE, sid LONG;\nUPDATE Site\nSET IsActiveForProtocol = [flag]\nWHERE ID = [sid];	Used to toggle Site IsActiveForProtocol flag		6/28/2016				10/24/2016	
81	1	1	0		s_site_list_by_park_river_segment	SQL	s_site_list_by_park_river_segment		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT s.ID, s.SiteCode, s.SiteName, s.SiteDescription, s.SiteDirections, s.IsActiveForProtocol, s.River_ID, s.Park_ID \nFROM ((Site s\nINNER JOIN Park p ON p.ID = s.Park_ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE\np.ParkCode = [pkcode]\nAND r.Segment = [waterway]\n;	Used to populate Site list form		6/28/2016					
82	1	1	0		s_park_id	SQL	s_park_id			PARAMETERS pkcode TEXT(4);\nSELECT ID FROM Park\nWHERE ParkCode = [pkcode];	Used to retrieve park ID when park code is known from breadcrumb context		6/28/2016				1/12/2017	
83	1	1	0		s_river_id	SQL	s_river_id			PARAMETERS waterway TEXT(10);\nSELECT ID FROM River\nWHERE River = [waterway];	Used to retrieve river ID when river is known from breadcrumb context		6/28/2016				1/12/2017	
84	1	1	0		s_river_segment_id	SQL	s_river_segment_id			PARAMETERS waterway TEXT(10);\nSELECT ID FROM River\nWHERE Segment = [waterway];	Used to retrieve river ID when river segment is known from breadcrumb context		6/28/2016				1/12/2017	
85	1	1	0		s_site_id_by_code	SQL	s_site_id_by_code			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT s.ID \nFROM (Site s\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE s.SiteCode = [scode]\nAND p.ParkCode = [pkcode];	Used to retrieve site ID from site and park codes		6/28/2016		6/28/2016		11/9/2017	
86	1	1	0		s_feature_id	SQL	s_feature_id		pkcode:string|feat:string	PARAMETERS pkcode TEXT(4), feat TEXT(2);\nSELECT f.ID \nFROM (((Feature f\nINNER JOIN Site_Feature sf ON sf.Feature_ID = f.ID)\nINNER JOIN Site s ON s.ID = sf.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE f.Feature = [feat]\nAND p.ParkCode = [pkcode]\n;	Used to retrieve feature ID from feature name and park code		6/28/2016					
87	1	1	0		i_site	SQL	i_site			PARAMETERS parkid LONG, riverid LONG,\ncode TEXT(2), sname TEXT(50), dir TEXT(255), descr TEXT(255),\nflag BYTE;\nINSERT INTO Site(Park_ID, River_ID, SiteCode, SiteName,\nSiteDirections, SiteDescription,\nIsActiveForProtocol) \nVALUES\n([parkid],[riverid],[code],[sname],\n[dir],[descr],[flag]);	Used to insert a site record via SaveToDb() Site class. Note parameters are limited to 255 char (dir may be truncated via parameter)		6/28/2016					
88	1	1	0		s_app_user	SQL	s_app_user			SELECT c.ID, LastName +',  '+ FirstName + ' ('+ UserName +')' AS AppUser, AccessLevel\nFROM ((Contact c\nINNER JOIN Contact_Access ca ON ca.Contact_ID = c.ID)\nINNER JOIN Access a ON a.ID = ca.Access_ID)\nWHERE UserName <> "" AND IsActive = 1\nORDER BY LastName, FirstName, Username;	Used for dropdown on User form to identify person editing, entering data throughout the application		6/30/2016					
89	1	1	0		i_tsys_login_action	SQL	i_tsys_login_action			PARAMETER environ_username TEXT(50),\naction TEXT(50);\nINSERT INTO tsys_Logins ( UserName, ActionTaken ) \nSELECT '[environ_username]' AS AppUser, '[action]' AS Action;	Used to log application login & close		6/30/2016					
90	1	1	0		s_user_access	SQL	s_user_access			PARAMETERS appuser TEXT(50);\nSELECT c.ID, LastName +',  '+ FirstName + ' ('+ Username +')' AS AppUser, AccessLevel, IsActive, ca.Access_ID AS AccessLevelID\nFROM ((Contact c\nINNER JOIN Contact_Access ca ON ca.Contact_ID = c.ID)\nINNER JOIN Access a ON a.ID = ca.Access_ID)\nWHERE Username = [appuser];	Used to compare selected user access with user access for active directory user		6/30/2016				10/17/2016	1
91	1	1	0		s_app_releases	SQL	s_app_releases			SELECT tsys_App_Releases.ID, 'Version ' & [VersionNumber] & ' (' & [ReleaseDate] & ')' AS Version FROM tsys_App_Releases;	Used in release dropdown on DbAdmin form		6/30/2016					
92	1	1	0		s_db_admin_info	SQL	s_db_admin_info			SELECT\nProject, Release_ID, DataTimeframe,\nUserName, Park, BackupPromptOnStartUp, BackupPromptOnExit,CompactBEOnExit,\nWebURL, AppContactName, AppContactOrg, AppContactPhone, AppContactEmail,\nar.ReleaseDate, ar.IsSupported, DatabaseTitle, VersionNumber, FileName\nFROM (tsys_App_Defaults ad\nINNER JOIN tsys_App_Releases ar ON ar.ID = ad.Release_ID)\n;	Used in DbAdmin form		6/30/2016					
93	1	1	0		s_tsys_datasheet_defaults	SQL	s_tsys_datasheet_defaults		parkID:long	PARAMETERS parkID LONG;\nSELECT dd.ID, dd.Park_ID, River_ID, CoverType, SpeciesRows, BlankRows,\nParkCode, River & "(" & Segment & ")" AS RiverSegment, Segment\nFROM ((tsys_datasheet_defaults dd\nINNER JOIN Park p ON p.ID = dd.Park_ID)\nINNER JOIN River r ON r.ID = dd.River_ID)\nWHERE\ndd.Park_ID = [parkID]\n;	Used to list datasheet defaults via SetDatasheetDefaults form		7/1/2016				9/22/2016	
94	1	1	0		u_tsys_datasheet_defaults	SQL	u_tsys_datasheet_defaults			PARAMETER ddid LONG, pid LONG, rid LONG, cover TEXT(3), species INTEGER, blanks INTEGER;\nUPDATE tsys_datasheet_defaults\nSET \nPark_ID = [pid], River_ID = [rid], CoverType = '[cover]', \nSpeciesRows = [species], BlankRows = [blanks]\nWHERE\nID = [ddid];	Used to update datasheet defaults via SetDatasheetDefaults form		7/1/2016				8/25/2016	
95	1	1	0		s_enums_for_type	SQL	s_enums_for_type		etype:string	PARAMETERS etype TEXT(25);\nSELECT DISTINCT id, label, summary, label & ' - ' & summary AS display, Sequence \nFROM AppEnum\nWHERE EnumType = [etype]\nORDER BY Sequence;	Used to populate dropdowns where values are in enum table (NOTE: DISTINCT is required for combobox autoexpand to work)		7/13/2016					
96	1	1	0		s_event_by_park_river_w_location	SQL	s_event_by_park_river_w_location		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(25);\nSELECT e.ID, s.SiteCode, e.Site_ID, s.SiteName, loc.LocationName, e.Location_ID, e.StartDate\nFROM ((((Event e\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Location loc ON loc.ID = e.Location_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE\np.ParkCode = [pkcode]\nAND\nr.Segment = [waterway]\nORDER BY e.StartDate DESC, s.SiteName ASC, loc.LocationName ASC;	Used for event list form		7/25/2016					
97	1	1	0		i_tsys_species_presence_by_park	SQL	i_tsys_species_presence_by_park			INSERT INTO tsys_species_presence_by_park\nSELECT * FROM\n\n(SELECT DISTINCT \nMaster_Plant_Code, \nLU_Code,\nBLCA AS Presence, \n'BLCA' AS ParkCode,\n'CO' AS StateAbbr\nFROM tlu_NCPN_Plants\n\nUNION ALL\n\nSELECT DISTINCT \nMaster_Plant_Code, \nLU_Code,\nCANY AS Presence, \n'CANY' AS ParkCode,\n'UT' AS StateAbbr\nFROM tlu_NCPN_Plants\n\nUNION ALL\n\nSELECT DISTINCT \nMaster_Plant_Code, \nLU_Code,\nCURE AS Presence, \n'CURE' AS ParkCode,\n'UT' AS StateAbbr\nFROM tlu_NCPN_Plants\n\nUNION ALL\n\nSELECT DISTINCT \nMaster_Plant_Code, \nLU_Code,\n[DINO (UT)] AS Presence, \n'DINO' AS ParkCode,\n'UT' AS StateAbbr\nFROM tlu_NCPN_Plants\n\nUNION ALL\n\nSELECT DISTINCT \nMaster_Plant_Code, \nLU_Code,\n[DINO (CO)] AS Presence, \n'DINO' AS ParkCode,\n'CO' AS StateAbbr\nFROM tlu_NCPN_Plants\n\nWHERE \nLU_Code IS NOT NULL\nORDER BY LU_Code\n);	Populates tsys_species_prescence_by_park & provides single column species presence		8/2/2016					
98	1	1	0		s_species_by_park	SQL	s_species_by_park			PARAMETERS pkcode TEXT(4);\nSELECT DISTINCT \nt.Master_PLANT_Code,\nt.LU_Code,\np.Utah_species,\nt.LU_Code + " (" + p.Utah_species + ")" AS ddSpecies\nFROM  tsys_species_presence_by_park t \nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = t.Master_PLANT_Code\nWHERE \nt.LU_Code IS NOT NULL\nAND t.presence <>'NP'\nAND t.ParkCode = [pkcode]\nORDER BY t.LU_Code;	Populates species dropdowns based on park presence (sp. Included if park presence <> NP)		8/2/2016				9/22/2016	
99	1	1	0		d_tsys_species_presence_by_park	SQL	d_tsys_species_presence_by_park			DELETE * FROM tsys_species_presence_by_park;	Clears tsys_species_presence_by_park so it can be updated w/ current data		8/2/2016					
100	1	1	0		s_top_rooted_species_last_year_by_park	SQL	s_top_rooted_species_last_year_by_park			PARAMETERS pkcode TEXT(4);\nSELECT TOP 99 p.Master_Species, p.LU_Code, rs.Master_PLANT_Code, 0 AS SEQ  \nFROM (((((RootedSpecies rs\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = rs.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = rs.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate park specific rooted species for vegplot datasheets		8/22/2016					
101	1	1	0		s_top_understory_species_last_year_by_park	SQL	s_top_understory_species_last_year_by_park			PARAMETERS pkcode TEXT(4);\nSELECT TOP 99 p.Master_Species, p.LU_Code, us.Master_PLANT_Code, us.IsSeedling, 0 AS SEQ  \nFROM (((((UnderstorySpecies us\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = us.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = us.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, NULL as IsSeedling, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate park specific understory species for vegplot datasheets		8/22/2016					
102	1	1	0		s_top_woody_species_last_year_by_park	SQL	s_top_woody_species_last_year_by_park			PARAMETERS pkcode TEXT(4);\nSELECT TOP 99 p.Master_Species, p.LU_Code, ws.Master_PLANT_Code, 0 AS SEQ  \nFROM (((((WoodyCanopySpecies ws\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = ws.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = ws.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate park specific woody canopy species for vegplot datasheets		8/22/2016					
103	1	1	0		s_top_rooted_species_last_year_by_river	SQL	s_top_rooted_species_last_year_by_river			PARAMETERS pkcode TEXT(4), waterway TEXT(10);\nSELECT TOP 99 p.Master_Species, p.LU_Code, rs.Master_PLANT_Code, 0 AS SEQ  \nFROM ((((((RootedSpecies rs\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = rs.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = rs.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nINNER JOIN River r ON r.Park_ID = pk.ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nAND r.Segment = [waterway]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate river segment specific rooted species for vegplot datasheets		8/22/2016					
104	1	1	0		s_top_understory_species_last_year_by_river	SQL	s_top_understory_species_last_year_by_river			PARAMETERS pkcode TEXT(4), river TEXT(10);\nSELECT TOP 99 p.Master_Species, p.LU_Code, us.Master_PLANT_Code, us.IsSeedling, 0 AS SEQ  \nFROM ((((((UnderstorySpecies us\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = us.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = us.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nINNER JOIN River r ON r.Park_ID = pk.ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nAND r.Segment = [river]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, NULL as IsSeedling, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate river segment specific understory species for vegplot datasheets		8/22/2016					
105	1	1	0		s_top_woody_species_last_year_by_river	SQL	s_top_woody_species_last_year_by_river			PARAMETERS pkcode TEXT(4), waterway TEXT(10);\nSELECT TOP 99 p.Master_Species, p.LU_Code, ws.Master_PLANT_Code, 0 AS SEQ  \nFROM ((((((WoodyCanopySpecies ws\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = ws.Master_PLANT_Code)\nINNER JOIN VegPlot v ON v.ID = ws.VegPlot_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = v.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nINNER JOIN River r ON r.Park_ID = pk.ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [pkcode]\nAND r.Segment = [waterway]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate river segment specific woody canopy species for vegplot datasheets		8/22/2016					
106	1	1	0		s_veg_walk_species_last_yr_by_park	SQL	s_veg_walk_species_last_yr_by_park			PARAMETERS park TEXT(4);\nSELECT p.Master_Family, p.Master_Species, p.LU_Code, vw.Master_PLANT_Code, vw.IsSeedling, 0 AS SEQ  \nFROM (((((VegWalkSpecies vw\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = vw.Master_PLANT_Code)\nINNER JOIN VegWalk v ON v.ID = vw.VegWalk_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [park]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Family, NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, NULL as IsSeedling, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate park specific species for vegwalk datasheets		8/22/2016					
107	1	1	0		s_veg_walk_species_last_yr_by_river	SQL	s_veg_walk_species_last_yr_by_river			PARAMETERS park TEXT(4), river TEXT(10);\nSELECT p.Master_Family, p.Master_Species, p.LU_Code, vw.Master_PLANT_Code, vw.IsSeedling, 0 AS SEQ  \nFROM ((((((VegWalkSpecies vw\nINNER JOIN tlu_NCPN_Plants p ON p.Master_PLANT_Code = vw.Master_PLANT_Code)\nINNER JOIN VegWalk v ON v.ID = vw.VegWalk_ID)\nINNER JOIN Event e ON e.ID = v.Event_ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nINNER JOIN River r ON r.Park_ID = pk.ID)\nWHERE \np.LU_Code IS NOT NULL \nAND YEAR(e.StartDate) = YEAR(Date())-1\nAND pk.ParkCode = [park]\nAND r.Segment = [river]\nUNION ALL\nSELECT TOP 8 NULL AS Master_Family, NULL AS Master_Species, NULL AS LU_Code, NULL AS Master_PLANT_Code, NULL as IsSeedling, 1 AS SEQ \nFROM usys_temp_table\nORDER BY \nSEQ, LU_Code;	Used to generate river segment specific species for vegwalk datasheets		8/22/2016					
108	1	1	0		s_datasheet_defaults_by_park	SQL	s_datasheet_defaults_by_park		pkcode:string	PARAMETERS pkcode TEXT(4);\nSELECT p.ParkCode, r.Segment, CoverType, SpeciesRows, BlankRows \nFROM (tsys_Datasheet_Defaults dd\nINNER JOIN Park p ON p.ID = dd.Park_ID)\nWHERE\np.ParkCode = [pkcode];	Used to determine # of species & blank rows for vegplot datasheets by park		8/22/2016					
109	1	1	0		s_datasheet_defaults_by_river	SQL	s_datasheet_defaults_by_river		pkcode:string|waterway:string	PARAMETERS pkcode TEXT(4), waterway TEXT(10);\nSELECT p.ParkCode, r.Segment, CoverType, SpeciesRows, BlankRows \nFROM ((tsys_Datasheet_Defaults dd\nINNER JOIN Park p ON p.ID = dd.Park_ID)\nINNER JOIN River r ON r.ID = dd.River_ID)\nWHERE\np.ParkCode = [pkcode]\nAND r.Segment = [waterway];	Used to determine # of species & blank rows for vegplot datasheets by river		8/22/2016					
110	1	1	0		i_login	SQL	i_login			PARAMETERS uname TEXT(50), activity TEXT(50), accesslvl TEXT(25);\nINSERT INTO tsys_Logins(UserName, ActionTaken, ReleaseNumber, AccessLevel)\nVALUES\n([uname], [activity],[version],[accesslvl]);	Records logins		8/23/2016					
111	1	1	0		u_cover_species	SQL	u_cover_species		tbl:string|vegplotID:integer|masterplantcode:string|pctcover:integer	UPDATE [tbl] \nSET\nVegPlot_ID = [VegPlotID], \nMaster_PLANT_Code = '[MasterPlantCode]', \nPercentCover) = [PercentCover];	Used to update for species classes: RootedSpecies, WoodyCanopySpecies		8/25/2016					
112	1	1	0		i_understory_species	SQL	i_understory_species			PARAMETERS VPID LONG, code TEXT(20), pct DOUBLE, seedling BYTE;\nINSERT INTO UnderstorySpecies(VegPlot_ID, Master_PLANT_Code, PercentCover, IsSeedling) VALUES \n([VPID],[code],[pct],[seedling]);	Used to insert understory cover species data		8/25/2016					
113	1	1	0		u_understory_species	SQL	u_understory_species			PARAMETERS uid LONG, VPID LONG, code TEXT(20), pct DOUBLE, seedling BYTE;\nUPDATE UnderstorySpecies\nSET \nVegPlot_ID = [VPID], \nMaster_PLANT_Code = [code], \nPercentCover = [pct], \nIsSeedling = [seedling]\nWHERE ID = [uid];	Used to update understory cover species data		8/25/2016					
114	1	1	0		i_vegwalk_species	SQL	i_vegwalk_species			PARAMETERS VWID LONG, code TEXT(20), seedling BYTE;\nINSERT INTO VegWalkSpecies(VegWalk_ID, Master_PLANT_Code, IsSeedling)\nVALUES\n([VWID],[code],[seedling]);	Inserts veg walk species		8/25/2016					
115	1	1	0		u_vegwalk_species	SQL	u_vegwalk_species			PARAMETERS vwsid LONG, VWID LONG, code TEXT(20), seedling BYTE;\nUPDATE VegWalkSpecies\nSET\nVegWalk_ID = [VWID], \nMaster_PLANT_Code = [code], \nIsSeedling = [seedling]\nWHERE ID = [vwsid];	Updates veg walk species		8/25/2016					
116	1	1	0		i_vegwalk	SQL	i_vegwalk			PARAMETERS EID LONG, CPID LONG, coltype TEXT(50), start DATE, \nCID LONG, MID LONG;\nINSERT INTO VegWalk(Event_ID, CollectionPlace_ID, CollectionType, WalkStartDate, CreateDate, CreatedBy_ID, LastModified, LastModifiedBy_ID)\nVALUES\n([EID], [CPID], [coltype], [start], NOW, [CID], NOW, [MID]);	Inserts veg walk record		8/25/2016					
117	1	1	0		u_vegwalk	SQL	u_vegwalk			PARAMETERS vwid LONG, EID LONG, CPID LONG, coltype TEXT(50), start DATE, \nMID LONG;\nUPDATE VegWalk\nSET\nEvent_ID = [EID], CollectionPlace_ID = [CPID], CollectionType = [coltype], \nWalkStartDate = [start], \nLastModified = NOW, \nLastModifiedBy_ID = [MID]\nWHERE\nID = [vwid];	Updates veg walk record		8/25/2016					
118	1	1	0		i_transducer	SQL	i_transducer			PARAMETERS EID LONG, ttype TEXT(1), tnum TEXT(10), sn TEXT(50), surveyed BYTE, tm TEXT(2), actdate DATE, acttime TIME;\nINSERT INTO Transducer (Event_ID, TransducerType, TransducerNumber, \nSerialNumber, IsSurveyed, Timing, ActionDate, ActionTime)\nVALUES\n([EID], [ttype], [tnum], [sn], [surveyed],[tm], [actdate], [acttime]);	Inserts transducer record		8/25/2016					
119	1	1	0		u_transducer	SQL	u_transducer			PARAMETERS tid LONG, EID LONG, ttype TEXT(1), tnum TEXT(10), sn TEXT(50), surveyed BYTE, tm TEXT(2), actdate DATE, acttime TIME;\nUPDATE Transducer \nSET\nEvent_ID = [EID], TransducerType = [ttype], TransducerNumber = [tnum], \nSerialNumber = [sn], IsSurveyed = [surveyed], Timing = [tm], \nActionDate = [actdate], ActionTime = [acttime]\nWHERE\nID = [tid];	Updates transducer record		8/25/2016					
120	1	1	0		i_tagline	SQL	i_tagline			PARAMETERS ldsource TEXT(1), LDID LONG, ldtype TEXT(2), ld DECIMAL, \nhtype TEXT(3), h DECIMAL;\nINSERT INTO Tagline(LineDistanceSource, LineDistanceSource_ID, LineDistanceType, LineDistance_m, HeightType, Height_cm)\nVALUES\n([ldsource],[LDID],[ldtype],[ld],[htype],[h]);	Inserts tagline record		8/25/2016					
121	1	1	0		u_tagline	SQL	u_tagline			PARAMETERS tid LONG, ldsource TEXT(1), LDID LONG, ldtype TEXT(2), ld DECIMAL, \nhtype TEXT(3), h DECIMAL;\nUPDATE Tagline\nSET\nLineDistanceSource = [ldsource],\nLineDistanceSource_ID = [LDID],\nLineDistanceType = [ldtype],\nLineDistance_m = [ld],\nHeightType = [htype],\nHeight_cm = [h]\nWHERE\nID = [tid];	Updates tagline record		8/25/2016					
122	1	1	0		i_transducer_distance	SQL	i_transducer_distance			PARAMETERS TID LONG, startpt TEXT(1), endpt TEXT(2), dist INTEGER;\nINSERT INTO TransducerDistance(Transducer_ID, StartPoint, EndPoint, Distance_cm)\nVALUES\n([TID],[startpt],[endpt],[dist]);	Insert transducer distance record		8/25/2016					
123	1	1	0		u_transducer_distance	SQL	u_transducer_distance			PARAMETERS tdid LONG, TID LONG, startpt TEXT(1), endpt TEXT(2), dist INTEGER;\nUPDATE TransducerDistance\nSET\nTransducer_ID = [TID],\nStartPoint = [startpt],\nEndPoint = [endpt],\nDistance_cm = [dist]\nWHERE\nID = [tdid];	Update transducer distance record		8/25/2016					
124	1	1	0		i_park	SQL	i_park			PARAMETERS code TEXT(4), pk TEXT(50), st TEXT(2), isactive BYTE;\nINSERT INTO Park(ParkCode, ParkName, ParkState, IsActiveForProtocol)\nVALUES\n([code],[pk],[st],[isactive]);	Insert park record		8/25/2016					
125	1	1	0		u_park	SQL	u_park			PARAMETERS pkid LONG, code TEXT(4), pk TEXT(50), st TEXT(2), isactive BYTE;\nUPDATE Park\nSET\nParkCode = [code], ParkName = [pk], ParkState = [st], IsActiveForProtocol = [isactive]\nWHERE\nID = [pkid];	Update park record		8/25/2016					
126	1	1	0		i_vegplot	SQL	i_vegplot			PARAMETERS EID LONG, SID LONG, FID LONG, TID LONG, MSSID LONG,\npnum INTEGER, pdist INTEGER, \npctfines DOUBLE, pctwater DOUBLE, \npctlitter DOUBLE, pctwd DOUBLE, \npctsd DOUBLE, pctfa DOUBLE, pctmss DOUBLE,\npctwcc DOUBLE, pcturc DOUBLE, pctarc DOUBLE,\npd INTEGER, bb BYTE,\nnocanopy BYTE, norooted BYTE, pctst DOUBLE, noindsp BYTE, \ncplot BYTE, rplot BYTE;\nINSERT INTO VegPlot(Event_ID, Site_ID, Feature_ID, VegTransect_ID,\nModalSedimentSize_ID,  \nPlotNumber, PlotDistance_m, \nPctFines, PctWater, PctLitter, PctWoodyDebris,\nPctFilamentousAlgae,PctStandingDead,PctModalSedimentSize,\nWoodyCanopyPctCover, UnderstoryRootedPctCover, AllRootedPctCover,\nPlotDensity, BeaverBrowse,\nNoCanopyVeg, NoRootedVeg, PctSocialTrails, NoIndicatorSpecies,\nCalibrationPlot, ReplicatePlot)\nVALUES\n([EID],[SID],[FID],[TID],[MSSID],\n[pnum],[pdist],\n[pctfines],[pctwater],[pctlitter],[pctwd],[pctfa],[pctsd],[pctmss],\n[pctwcc],[pcturc],[pctarc],\n[pd],[bb],\n[nocanopy],[norooted],[pctst],[noindsp],[cplot],[rplot]);	Insert veg plot record		8/25/2016		8/25/2016		12/5/2017	
127	1	1	0		u_vegplot	SQL	u_vegplot			PARAMETERS vid LONG, EID LONG, SID LONG, FID LONG, TID LONG, MSSID LONG,\npnum INTEGER, pdist INTEGER, \npctfines DOUBLE, pctwater DOUBLE, \npctlitter DOUBLE, pctwd DOUBLE, \npctsd DOUBLE, pctfa DOUBLE, pctmss DOUBLE,\npctwcc DOUBLE, pcturc DOUBLE, pctarc DOUBLE,\npd INTEGER, bb BYTE,\nnocanopy BYTE, norooted BYTE, pctst DOUBLE, noindsp BYTE, \ncplot BYTE, rplot BYTE;\nUPDATE VegPlot\nSET\nEvent_ID = [EID], Site_ID = [SID], Feature_ID = [FID], VegTransect_ID = [TID],\nModalSedimentSize_ID = [MSSID],  \nPlotNumber = [pnum], PlotDistance_m = [pdist], \nPctFines = [pctfines], PctWater = [pctwater], PctLitter = [pctlitter], PctWoodyDebris = [pctwd],\nPctFilamentousAlgae = [pctfa], PctModalSedimentSize = [pctmss], PctStandingDead = [pctsd],\nWoodyCanopyPctCover = [pctwcc], UnderstoryRootedPctCover = [pcturc], AllRootedPctCover = [pctarc],\nPlotDensity = [pd], BeaverBrowse = [bb],\nNoCanopyVeg = [nocanopy], NoRootedVeg = [norooted], PctSocialTrails = [pctst], NoIndicatorSpecies = [noindsp],\nCalibrationPlot = [cplot], ReplicatePlot = [rplot]\nWHERE\nID = [vid];	Update veg plot record		8/25/2016		8/25/2016		12/5/2017	
128	1	1	0		i_task	SQL	i_task			PARAMETERS ttype TEXT(255), typeident LONG, descr TEXT(255),\nstat LONG, prio LONG, RID LONG, reqdate DATE, CID LONG, compldate DATE, LMID LONG;\nINSERT INTO Task(TaskType, TaskType_ID, Task, Status_ID, Priority_ID, RequestedBy_ID, RequestDate, CompletedBy_ID, CompleteDate, LastModifiedBy_ID, LastModified)\nVALUES\n([ttype],[typeident],[descr],[stat],[prio],[RID],[reqdate],[CID],[compldate],[LMID],Now);	Insert task record		8/25/2016					
129	1	1	0		u_task	SQL	u_task			PARAMETERS tid LONG, ttype TEXT(255), typeident LONG, descr TEXT(255),\nstat LONG, prio LONG, RID LONG, reqdate DATE, CID LONG, compldate DATE, LMID LONG;\nUPDATE Task\nSET\nTaskType = [ttype],\nTaskType_ID = [typeident],\nTask = [descr],\nStatus_ID = [stat],\nPriority_ID = [prio],\nRequestedBy_ID = [RID],\nRequestDate = [reqdate],\nCompletedBy_ID = [CID],\nCompleteDate = [compldate],\nLastModifiedBy_ID = [LMID],\nLastModified = Now\nWHERE\nID = [tid];	Update task record		8/25/2016					
130	1	1	0		u_task_complete	SQL	u_task_complete			PARAMETERS tid LONG, CID LONG, complDate DATE, LMID LONG;\nUPDATE Task\nSET CompletedBy_ID = [CID],\nCompleteDate = [complDate],\nLastModifiedBy_ID = [LMID],\nLastModified = Now\nWHERE\nID = [tid];	Complete task record		8/25/2016					
131	1	1	0		i_comment	SQL	i_comment			PARAMETERS comtype TEXT(255), ctid LONG, cmt TEXT(255), CID LONG, LMID LONG;\nINSERT INTO AppComment(CommentType, CommentType_ID, Comment, CreatedBy_ID, CreateDate, LastModifiedBy_ID, LastModified)\nVALUES\n([comtype],[ctid],[cmt],[CID],Now,[LMID],Now);	Insert application comment		8/25/2016				12/6/2016	1
132	1	1	0		u_comment	SQL	u_comment			PARAMETERS acid LONG, comtype TEXT(255), ctid LONG, cmt TEXT(255), LMID LONG;\nUPDATE AppComment\nSET\nCommentType = [comtype],\nCommentType_ID = [ctid],\nComment = [cmt],\nLastModifiedBy_ID = [LMID],\nLastModified = Now\nWHERE\nID = [acid];	Update application comment		8/25/2016					
133	1	1	0		i_photo	SQL	i_photo			PARAMETERS pdate DATE, ptype TEXT(2),\nphotogid LONG, digfname TEXT(50), NID TEXT(50),\npfacing TEXT(4), ploc TEXT(10), plocdesc TEXT(255),\nporient TEXT(255), sptid LONG, sloc TEXT(10),\ncloseup BYTE, replacemt BYTE, skip BYTE, inact LONG,\nlpupdate DATE,  CID LONG,\n LMID LONG;\nINSERT INTO Photo(PhotoDate, PhotoType, Photographer_ID, DigitalFilename,\nNCPNImageID,PhotogFacing,PhotogLocation, PhotogLocationDesc, PhotogOrientation,\nSurveyPoint_ID,SubjectLocation,IsCloseup,IsReplacement,IsSkipped, InActive,\nLastPhotoUpdate,CreateDate,CreatedBy_ID,LastModified, LastModifiedBy_ID)\nVALUES\n([pdate],[ptype],[photogid],[digfname],[NID],[pfacing],[ploc],[plocdesc],[porient],[sptid],[sloc],[closeup],[replacemt],[skip],[inact],[lpupdate],Now,[CID],Now,[LMID]);	Insert photo record		8/25/2016					
134	1	1	0		u_photo	SQL	u_photo			PARAMETERS poid LONG, pdate DATE, ptype TEXT(2),\nphotogid LONG, digfname TEXT(50), NID TEXT(50),\npfacing TEXT(4), ploc TEXT(10), plocdesc TEXT(255),\nporient TEXT(255), sptid LONG, sloc TEXT(10),\ncloseup BYTE, replacemt BYTE, skip BYTE, inact LONG,\nlpupdate DATE, LMID LONG; \nUPDATE Photo\nSET\nPhotoDate = [pdate], PhotoType = [ptype],\nPhotographer_ID = [photogid], DigitalFilename = [digfname],\nNCPNImageID = [NID], PhotogFacing = [pfacing],\nPhotogLocation = [ploc], PhotogLocationDesc = [plocdesc],\nPhotogOrientation = [porient], SurveyPoint_ID = [sptid],\nSubjectLocation = [sloc], IsCloseup = [closeup],\nIsReplacement = [replacemt],\nIsSkipped = [skip],\nInActive = [inact],\nLastPhotoUpdate = [lpupdate],\nLastModified = Now,\nLastModifiedBy_ID = [LMID]\nWHERE\nID = [poid];	Update photo record		8/25/2016					
135	1	1	0		i_surveyfile	SQL	i_surveyfile			PARAMETERS sfname TEXT(255), sfpath TEXT(255), stype TEXT(1),\nssource TEXT(4), tptid LONG, rptid LONG, teid LONG, beid LONG, seid LONG;\nINSERT INTO SurveyDataSourceFile(SourceFileName, SourceFilePath, SurveyType,\nSurveySource, TranslationPoint_ID, RotationPoint_ID, TranslationError_ID,\nRotationError_ID, BaseError_ID, SurveyError_ID)\nVALUES\n([sfname],[sfpath],[stype],[ssource],[tptid],[rptid],[teid],[reid],[beid],[seid]);	Insert photo record		8/25/2016				9/26/2016	
136	1	1	0		u_surveyfile	SQL	u_surveyfile			PARAMETERS sfid LONG, sfname TEXT(255), sfpath TEXT(255), stype TEXT(1),\nssource TEXT(4), tptid LONG, rptid LONG, teid LONG, beid LONG, seid LONG;\nUPDATE SurveyDataSourceFile\nSET\nSourceFileName = [sfname], SourceFilePath = [sfpath], SurveyType = [stype],\nSurveySource = [ssource], TranslationPoint_ID = [tptid], RotationPoint_ID = [rptid], TranslationError_ID = [teid],\nRotationError_ID = [reid], BaseError_ID = [beid], SurveyError_ID = [seid]\nWHERE\nID = [sfid];	Update photo record		8/25/2016					
137	1	1	0		i_surveypoint	SQL	i_surveypoint			PARAMETERS ptname TEXT(255), ptype TEXT(4), x DOUBLE, y DOUBLE, z DOUBLE,\nptdescr TEXT(255), del BYTE;\nINSERT INTO SurveyPoint(PointName, PointType, XCoord, YCoord, ZCoord,\nPointDescription, IsDeleted)\nVALUES\n([ptname],[ptype],[x],[y],[z],[ptdescr],[del]);	Insert survey point record		8/25/2016					
138	1	1	0		u_surveypoint	SQL	u_surveypoint			PARAMETERS sid LONG, ptname TEXT(255), ptype TEXT(4), x DOUBLE, y DOUBLE, z DOUBLE, ptdescr TEXT(255), del BYTE;\nUPDATE SurveyPoint\nSET\nPointName = [ptname], PointType = [ptype], \nXCoord = [x], YCoord = [y], ZCoord = [z],\nPointDescription = [ptdescr], IsDeleted = [del]\nWHERE ID = [sid];	Update survey point record		8/25/2016					
139	1	1	0		i_surveypoint_error	SQL	i_surveypoint_error			PARAMETERS etype TEXT(255), x DOUBLE, y DOUBLE, z DOUBLE;\nINSERT INTO SurveyPointError(ErrorType, XCoordError, YCoordError, ZCoordError)\nVALUES\n([etype],[x],[y],[z]);	Insert survey point error		8/25/2016					
140	1	1	0		u_surveypoint_error	SQL	u_surveypoint_error			PARAMETERS speid LONG, etype TEXT(255), x DOUBLE, y DOUBLE, z DOUBLE;\nUPDATE SurveyPointError\nSET\nErrorType = [etype], XCoordError = [x], YCoordError = [y], ZCoordError = [z]\nWHERE\nID = [speid];	Update survey point error		8/25/2016					
141	1	1	0		i_surveypoint_surveyfile	SQL	i_surveypoint_surveyfile			PARAMETERS sfid LONG, sptid LONG;\nINSERT INTO\nSurveyDataSourceFile_SurveyPoint(SurveyDataSourceFile_ID, SurveyPoint_ID)\nVALUES\n([sfid],[sptid]);	Insert survey point survey file record		8/25/2016					
142	1	1	0		i_usys_temp_photo	SQL	i_usys_temp_photo			PARAMETERS ppath TEXT(255), pfile TEXT(255), pdate DATETIME, ptype TEXT(1);\nINSERT INTO usys_temp_photo(PhotoPath, PhotoFilename, PhotoDate, PhotoType)\nVALUES\n([ppath],[pfile],[pdate],[ptype]);	Adds limited photo data while photo is added to db		8/30/2016					
143	1	1	0		u_usys_temp_photo	SQL	u_usys_temp_photo			PARAMETERS iid LONG, ptype TEXT(1);\nUPDATE usys_temp_photo\nSET\nPhotoType = [ptype]\nWHERE\nID = [iid];	Updates photo data phototype		8/30/2016					
144	1	1	0		s_photo_data	SQL	s_photo_data			SELECT \np.ID AS PhotoID, p.PhotoType, p.PhotoDate, p.Photographer_ID, p.PhotogFacing, p.PhotogLocation, p.PhotogOrientation, p.SubjectLocation, p.IsCloseup, p.IsReplacement, p.IsSkipped,\np.DigitalFilename as PhotoFilename, NULL as PhotoPath,\ne.StartDate, e.ID AS EventID,\nc.FirstName, c.LastName, c.FirstName & ' ' & c.LastName AS PhotogName, c.Email, \ns.SiteCode, s.ID AS SiteID, s.Park_ID, s.River_ID,\npk.ParkCode,\nr.River, r.Segment\nFROM ((((((Photo p\nINNER JOIN Event_Photo ep ON ep.Photo_ID = p.ID)\nINNER JOIN Event e ON e.ID = ep.Event_ID)\nINNER JOIN Contact c ON c.ID = p.Photographer_ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nINNER JOIN Park pk ON pk.ID = s.Park_ID)\nORDER BY p.PhotoType\n;	Lists photo data including event, site, river, park, and photographer (contact) for populating photo treeview via mod_Treeview LoadTree().		8/31/2016					
145	1	1	0		s_usys_temp_photo_data	SQL	s_usys_temp_photo_data			SELECT \np.ID AS PhotoID, p.PhotoPath, p.PhotoFilename, p.PhotoType, p.PhotoDate, p.Photographer_ID, e.StartDate, p.Event_ID,\nc.FirstName, c.LastName, c.FirstName & ' ' & c.LastName AS PhotogName, c.Email,\ns.SiteCode, s.ID AS SiteID, s.Park_ID, s.River_ID,\npk.ParkCode,\nr.River, r.Segment\nFROM (((((usys_temp_photo p\nLEFT JOIN Event e ON e.ID = p.Event_ID)\nLEFT JOIN Contact c ON c.ID = p.Photographer_ID)\nLEFT JOIN Site s ON s.ID = e.Site_ID)\nLEFT JOIN River r ON r.ID = s.River_ID)\nLEFT JOIN Park pk ON pk.ID = s.Park_ID)\nORDER BY\np.PhotoType\n;	Lists temporary photo data including event, site, river, park and photographer (contact) for populating photo treeview via mod_Treeview LoadTreeview()		8/31/2016					
146	1	1	0		s_feature_list_by_site	SQL	s_feature_list_by_site			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT f.ID, f.Feature, loc.LocationName, f.Location_ID FROM ((((Feature f\nLEFT JOIN Location loc ON loc.ID = f.Location_ID)\nLEFT JOIN Site_Feature sf ON sf.Feature_ID = f.ID )\nLEFT JOIN Site s ON s.ID = sf.Site_ID )\nLEFT JOIN Park p ON p.ID = s.Park_ID )\nWHERE p.ParkCode = [pkcode]\nAND s.SiteCode = [scode]\nAND s.IsActiveForProtocol = 1 \nORDER BY f.Feature ASC;	Used to list features in breadcrumb		9/7/2016					
147	1	1	0		s_record_action_by_refID	SQL	s_record_action_by_refID			PARAMETERS reftype TEXT(25), refID LONG;\nSELECT ra.ID, ra.Contact_ID, ra.Activity, ra.ActionDate, \nc.FirstName + ' ' + c.LastName AS ContactName\nFROM RecordAction ra\nLEFT JOIN Contact c ON c.ID = ra.Contact_ID\nWHERE\nra.ReferenceType = [reftype]\nAND\nra.Reference_ID = [refID];	Lists contact, action & dates for set observer / recorder list form		9/9/2016					
148	1	1	0		s_events_by_site	SQL	s_events_by_site			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT DISTINCT\ne.ID, \ne.StartDate,\ne.StartDate  & ' - ' & s.SiteCode as SiteEventDate,\ne.StartDate & ' - ' & s.SiteName & ' (' & s.SiteCode  & ')'  as SiteNameEventDate,\ns.SiteCode,\np.ParkCode\nFROM ((Event e\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \ns.SiteCode = [scode]\nAND\np.ParkCode = [pkcode]\nORDER BY e.StartDate DESC;	Events listing by site (CANY/DINO) or if no feature is selected (BLCA)		9/13/2016				1/10/2017	
149	1	1	0		s_events_by_feature	SQL	s_events_by_feature			PARAMETERS pkcode TEXT(4), scode TEXT(2), feat TEXT(2);\nSELECT DISTINCT\ne.ID, \ne.StartDate,\nf.Feature & '-' & e.StartDate as FeatureEventDate,\ne.StartDate & ' - ' & s.SiteName & ' - ' & f.Feature  as FeatureNameEventDate,\ns.SiteCode,\nf.Feature,\np.ParkCode\nFROM ((((Event e\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nINNER JOIN Site_Feature sf ON sf.Site_ID = s.ID)\nINNER JOIN Feature f ON f.ID = sf.Feature_ID)\nWHERE \np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode]\nAND\nf.Feature = [feat];	Events listing by feature (BLCA)		9/13/2016				1/10/2017	
150	1	1	0		s_modal_sediment_size	SQL	s_modal_sediment_size			SELECT \nae.ID,\nae.EnumType,\nae.Label,\nae.Summary\nFROM AppEnum ae\nWHERE ae.EnumType = 'ModWentworthClassSize'\nORDER BY ae.Sequence;	Modified Wentworth Class Size values		9/13/2016					
151	1	1	0		s_vegtransect_by_site	SQL	s_vegtransect_by_site			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT DISTINCT\nvt.Location_ID,\nvt.Event_ID,\nvt.TransectNumber,\nvt.SampleDate,\nvt.TransectNumber + ' - ' + s.SiteName AS TransectSite,\ne.StartDate,\ns.SiteCode,\np.ParkCode\nFROM (((VegTransect vt\nINNER JOIN Event e ON e.ID = vt.Event_ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode];	VegTransect listing by site (CANY) or if no feature is selected (BLCA), (DINO no transects)		9/13/2016				1/11/2017	
152	1	1	0		s_vegtransect_by_feature	SQL	s_vegtransect_by_feature			PARAMETERS pkcode TEXT(4), scode TEXT(2), feat TEXT(2);\nSELECT DISTINCT\nvt.Location_ID,\nvt.Event_ID,\nvt.TransectNumber,\nvt.SampleDate,\nvt.TransectNumber + ' - ' + s.SiteName + ' - ' + f.Feature AS TransectSiteFeature,\ne.StartDate,\nf.Feature,\ns.SiteCode,\np.ParkCode\nFROM (((((VegTransect vt\nINNER JOIN Event e ON e.ID = vt.Event_ID)\nINNER JOIN Feature_VegTransect fvt ON vt.ID = fvt.VegTransect_ID)\nINNER JOIN Feature f ON f.ID = fvt.Feature_ID)\nINNER JOIN Site s ON s.ID = e.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode]\nAND\nf.Feature = [feat];	VegTransect listing by feature (BLCA)		9/13/2016				1/11/2017	
153	1	1	0		s_vegplot_by_site	SQL	s_vegplot_by_site			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT DISTINCT\nvp.PlotNumber,\nvp.PlotDistance_m,\nvp.ModalSedimentSize_ID,\nvp.PctModalSedimentSize,\nvp.PctFines,\nvp.PctWater,\nvp.PctLitter,\nvp.PctWoodyDebris,\nvp.PctStandingDead,\nvp.PctFilamentousAlgae,\nvp.WoodyCanopyPctCover,\nvp.UnderstoryRootedPctCover,\nvp.AllRootedPctCover,\nvp.PlotDensity,\nvp.BeaverBrowse,\nvp.NoCanopyVeg,\nvp.NoRootedVeg,\nvp.PctSocialTrails,\nvp.NoIndicatorSpecies,\nvp.CalibrationPlot,\nvp.ReplicatePlot,\ne.StartDate,\ns.SiteCode,\np.ParkCode,\nvt.TransectNumber,\nvt.SampleDate\nFROM ((((VegPlot vp\nINNER JOIN VegTransect vt ON vt.ID = vp.VegTransect_ID)\nINNER JOIN Event e ON e.ID = vp.Event_ID)\nINNER JOIN Site s ON s.ID = vp.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE\np.ParkCode = [pkcode]\nAND\n\ns.SiteCode = [scode];	VegPlot listing by site (CANY/DINO)		9/13/2016		9/13/2016		12/5/2017	
154	1	1	0		s_vegplot_by_feature	SQL	s_vegplot_by_feature			PARAMETERS pkcode TEXT(4), scode TEXT(2), feat TEXT(2);\nSELECT DISTINCT\nvp.PlotNumber,\nvp.PlotDistance_m,\nvp.ModalSedimentSize_ID,\nvp.PctModalSedimentSize,\nvp.PercentFines,\nvp.PercentWater,\nvp.PercentLitter,\nvp.PercentWoodyDebris,\nv.PctStandingDead,\nvp.PctFilamentousAlgae,\nvp.WoodyCanopyPctCover,\nvp.UnderstoryRootedPctCover,\nvp.AllRootedPctCover,\nvp.PlotDensity,\nvp.BeaverBrowse,\nvp.NoCanopyVeg,\nvp.NoRootedVeg,\nvp.PctSocialTrails,\nvp.NoIndicatorSpecies,\nvp.CalibrationPlot,\nvp.ReplicatePlot,\ne.StartDate,\nf.Feature,\ns.SiteCode,\np.ParkCode,\nvt.TransectNumber,\nvt.SampleDate\nFROM ((((((VegPlot vp\nINNER JOIN VegTransect vt ON vt.ID = vp.VegTransect_ID)\nINNER JOIN Event e ON e.ID = vp.Event_ID)\nINNER JOIN Site s ON s.ID = vp.Site_ID)\nINNER JOIN Site_Feature sf ON sf.Site_ID = s.ID)\nINNER JOIN Feature f ON f.ID = sf.Feature_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE\np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode]\nAND\n\nf.Feature = [feat];	VegPlot listing by feature (BLCA)		9/13/2016		9/13/2016		12/5/2017	
155	1	1	0		s_flags	SQL	s_flags			SELECT ID, FlagGroup, FlagType, FlagName, \nCode,NumericCode,Label \nFROM Flags\nORDER BY\nFlagGroup, FlagType, Code ASC;	Used for flag list		9/22/2016					
156	1	1	0		s_site_by_park_river_segment	SQL	s_site_by_park_river_segment		pkcode:string|seg:string	PARAMETERS pkcode TEXT(4), seg TEXT(10);\nSELECT s.ID, s.SiteCode, s.SiteName, s.SiteDescription, s.SiteDirections, s.IsActiveForProtocol, s.SiteName + ' (' + s.SiteCode + ')' AS Site\nFROM ((Site s\nINNER JOIN Park p ON p.ID = s.Park_ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE\np.ParkCode = [pkcode]\nAND r.Segment = [seg]\nORDER BY\nSiteName, SiteCode ASC;	Used for site breadcrumb		9/22/2016					
157	1	1	0		s_location_by_park_river_segment	SQL	s_location_by_park_river_segment			PARAMETERS pkcode TEXT(4), seg TEXT(25);\nSELECT DISTINCT l.ID, l.LocationName, l.CollectionSourceName, l.LocationType\nFROM (((Location l\nINNER JOIN Site s ON s.ID = l.Site_ID)\nINNER JOIN Park p ON s.Park_ID = p.ID)\nINNER JOIN River r ON r.ID = s.River_ID)\nWHERE p.ParkCode = [pkcode]\nAND r.Segment = [seg]\n;	Used to populate location dropdown for Event form		9/26/2016				10/2/2017	47
158	1	1	0		s_mod_wentworth_scale	SQL	s_mod_wentworth_scale			SELECT w.ID, w.Code, w.Label, w.ActiveYear, w.RetireYear, w.DiameterRange_mm, w.Label + '('+ w.Code +')' AS category\nFROM ModWentworthScale AS w\nORDER BY w.RetireYear, w.CategoryOrder;	Lists all sediment class size categories		10/4/2016		10/4/2016		10/4/2016	
159	1	1	0		s_mod_wentworth_scale_by_year	SQL	s_mod_wentworth_scale_by_year			PARAMETERS yractive INT;\nSELECT w.ID, w.Code, w.Label, w.ActiveYear, w.RetireYear, w.DiameterRange_mm, w.Label + '('+ w.Code +')' AS category\nFROM ModWentworthScale AS w\nWHERE\nw.ActiveYear < [yractive] + 1\nAND w.RetireYear IS NULL\nORDER BY w.RetireYear, w.CategoryOrder;	List active sediment class size categories		10/4/2016		10/4/2016		11/3/2017	
166	1	1	0		s_app_version	SQL	s_app_version			SELECT VersionNumber\nFROM tsys_App_Releases\nWHERE \nIsSupported > 0\nORDER BY IsSupported;	Used to retrieve database app version via GetAppVersion() mod_Initialize_App		10/5/2016		10/5/2016		10/5/2016	
167	1	1	0		s_app_enum_list	SQL	s_app_enum_list			PARAMETERS etype TEXT(25);\nSELECT ID, Label, Summary\nFROM AppEnum\nWHERE EnumType = [etype]\nORDER BY Sequence ASC;	Used to retrieve enum values		10/17/2016		10/17/2016		10/17/2016	
169	1	1	0		u_mod_wentworth_retireyear	SQL	u_mod_wentworth_retireyear			PARAMETERS yr INT, mwsid LONG;\nUPDATE ModWentworthScale\nSET\nRetireYear = yr\nWHERE\nID = mwsid;	Updates retirement year via Mod Wentworth Scale form		10/24/2016		10/24/2016		10/24/2016	
170	1	1	0		s_task_list	SQL	s_task_list			SELECT t.ID, t.TaskType, t.Task, t.Status_ID, t.Priority_ID, t.RequestedBy_ID, t.RequestDate, t.CompletedBy_ID, t.CompleteDate, p.Priority, p.Icon, s.Status, s.Icon,\nc1.FirstName + ' ' + c1.LastName AS Requestor, c1.ID, c2.FirstName + ' ' + c2.LastName AS Completor, c2.ID \nFROM ((((Task t\nLEFT JOIN Priority p ON p.ID = t.Priority_ID)\nLEFT JOIN Status s ON s.ID = t.Status_ID)\nLEFT JOIN Contact c1 ON c1.ID = t.RequestedBy_ID)\nLEFT JOIN Contact c2 ON c2.ID = t.CompletedBy_ID);	Used to present task list on task form		10/28/2016		10/28/2016		2/16/2017	1
171	1	1	0		i_imported_data	SQL	i_imported_data			PARAMETERS idate DATETIME, sfile TEXT(50), dtbl TEXT(25), numrecs INT, srec LONG, erec LONG;\nINSERT INTO ImportedData\n(ImportDate, SourceFile, DestinationTable, NumberOfRecordsImported, StartRecord_ID, EndRecord_ID)\nVALUES\n([idate], [sfile], [dtbl], [numrecs], [srec], [erec]);	Adds import documentation		12/1/2016					
172	1	1	0		s_mod_wentworth_for_year	SQL	s_mod_wentworth_for_year			PARAMETERS yr Long;\nSELECT Label AS ClassSize, Code, DiameterRange_mm, ActiveYear, RetireYear\nFROM ModWentworthScale\nWHERE \n([yr] Between ([ActiveYear]) And ([RetireYear])) \nOR\n(([yr]>[ActiveYear] OR  [yr] = [ActiveYear]) \nAND [RetireYear] IS NULL)\n\nORDER BY CategoryOrder;	Returns mod wentworth scale in use for given year		12/14/2016		12/14/2016		11/3/2017	
173	1	1	0		s_mod_wentworth_for_eventyr	SQL	s_mod_wentworth_for_eventyr			PARAMETERS eventyr INT;\nSELECT w.ID, w.Label as SubstrateClass, w.Code, w.DiameterRange_mm as Size, w.ActiveYear,  w.RetireYear, w.Label + ' ('+ w.Code +')' AS category\nFROM ModWentworthScale AS w\nWHERE\n(\n(w.ActiveYear = [eventyr]) \nOR\n(w.RetireYear = [eventyr])\nOR\n(w.ActiveYear <[eventyr]) \nAND \n((w.RetireYear IS NULL) OR ([eventyr] < w.RetireYear))\n)\nORDER BY w.CategoryOrder;	Used to display modified wentworth scale classes for substrate cover % form		1/9/2017		1/9/2017	1	1/9/2017	1
174	1	1	0		u_contact_isnps_flag	SQL	u_contact_isnps_flag			PARAMETERS flag BYTE, cid LONG;\nUPDATE Contact\nSET IsNPS = [flag]\nWHERE ID = [cid];	Used to update contact is NPS flag.		1/24/2017					
179	1	1	0		i_template	SQL	i_template			PARAMETERS vers FLOAT, sflag INTEGER, contxt TEXT(255), syntx TEXT(10),\ntname TEXT(255), prms TEXT(255), tmpl TEXT(1500), rmks TEXT(255), effdate DATE, CID LONG, LMID LONG;\nINSERT INTO tsys_Db_templates (Version, IsSupported, Context, Syntax, TemplateName, Params, Template, Remarks, EffectiveDate, RetireDate, CreateDate, CreatedBy_ID, LastModified, LastModifiedBy_ID)\nVALUES\n([vers],[sflag],[contxt],[syntx],[tname],[prms],[tmpl],[rmks],[effdate],\nNULL, NOW, [CID],NOW, [LMID]);	Used by TemplateAdd form to insert new templates. Note template MEMO field parameter uses TEXT(1500) to avoid error 3139 Syntax error in parameter clause for qdf.sql		1/31/2017				2/2/2017	
204	1	1	0		s_vegplot_number_by_site	SQL	s_vegplot_number_by_site		pkcode:STRING|scode:STRING	PARAMETERS pkcode TEXT(4), scode TEXT(2); \nSELECT DISTINCT vp.PlotNumber, s.SiteCode, p.ParkCode, vt.TransectNumber \nFROM (((VegPlot vp \nINNER JOIN VegTransect vt ON vt.ID = vp.VegTransect_ID) \nINNER JOIN Site s ON s.ID = vp.Site_ID) \nINNER JOIN Park p ON p.ID = s.Park_ID) \nWHERE p.ParkCode = [pkcode] AND s.SiteCode = [scode];	Used on locations form to provide a list of veg plot #s for plot location types for cbxLocationID.Recordset		2/1/2017		2/1/2017 11:22:05 AM	22	2/1/2017 11:22:05 AM	22
232	1	1	0		s_vegtransect_number_by_site	SQL	s_vegtransect_number_by_site		pkcode:STRING|scode:STRING	PARAMETERS pkcode TEXT(4), scode TEXT(2); \nSELECT DISTINCT vt.TransectNumber, s.SiteCode, p.ParkCode \nFROM (((VegTransect vt \nINNER JOIN Site_VegTransect sv ON sv.VegTransect_ID = vt.ID)\nINNER JOIN Site s ON s.ID = sv.Site_ID) \nINNER JOIN Park p ON p.ID = s.Park_ID) \nWHERE  p.ParkCode = [pkcode] AND s.SiteCode = [scode];	Used for location form dropdown to identify the transects existing at a site.		2/2/2017		2/2/2017 2:02:45 PM	22	2/2/2017 2:02:45 PM	22
233	1	1	0		s_feature_by_site	SQL	s_feature_by_site		pkcode:STRING|scode:STRING	PARAMETERS pkcode TEXT(4), scode TEXT(2); \nSELECT f.ID, f.Feature\nFROM (((Feature f \nLEFT JOIN Site_Feature sf ON sf.Feature_ID = f.ID ) \nLEFT JOIN Site s ON s.ID = sf.Site_ID ) \nLEFT JOIN Park p ON p.ID = s.Park_ID ) \nWHERE p.ParkCode = [pkcode] \nAND s.SiteCode = [scode] \nAND s.IsActiveForProtocol = 1  \nORDER BY f.Feature ASC;	Used for location form dropdown to identify the features existing at a site.		2/2/2017		2/2/2017 3:24:15 PM	22	2/2/2017 3:24:15 PM	22
234	1	1	0		i_location	SQL	i_location		csn:STRING|ltype:STRING|lname:STRING|\ndist:INTEGER|brg:INTEGER|lnotes:STRING|CID:LONG|LMID:LONG	PARAMETERS csn TEXT(25), ltype TEXT(1), lname TEXT(100), \ndist INTEGER, brg INTEGER, lnotes TEXT(1500), sid LONG, CID LONG, LMID LONG;\nINSERT INTO Location\n(CollectionSourceName, LocationType, LocationName, HeadtoOrientDistance_m,\nHeadtoOrientBearing, LocationNotes, Site_ID, CreateDate, CreatedBy_ID,\nLastModified, LastModifiedBy_ID)\nVALUES\n([csn], [ltype], [lname], [dist], [brg], [lnotes], [sid], Now, [CID], Now, [LMID]);	Used by location form to insert locations into the database.		2/2/2017		2/2/2017 4:23:10 PM	22	2/7/2017 1:39:10 PM	22
235	1	1	0		i_sensitive_locations	SQL	i_sensitive_locations		pkid:LONG|lid:LONG|CID:LONG|LMID:LONG	PARAMETERS pkid LONG, lid LONG, CID LONG, LMID LONG;\nINSERT INTO SensitiveLocations(Park_ID, Location_ID, CreateDate,\nCreatedBy_ID, LastModified, LastModifiedBy_ID)\nVALUES([pkid],[lid],Now,[CID],Now,[LMID]);	Used by location form (list) to add sensitive locations.		2/3/2017		2/3/2017 10:48:53 AM	22	2/3/2017 10:48:53 AM	22
236	1	1	0		d_sensitive_locations	SQL	d_sensitive_locations		pkid:LONG|lid:LONG	PARAMETERS pkid LONG, lid LONG;\nDELETE * FROM SensitiveLocations\nWHERE\nPark_ID = [pkid]\nAND Location_ID = [lid];	Used by location form (list) to remove sensitive locations.		2/3/2017		2/3/2017 11:00:39 AM	22	2/3/2017 11:00:39 AM	22
237	1	1	0		i_sensitive_species	SQL	i_sensitive_species		pkid:LONG|sp:STRING|CID:LONG|LMID:LONG	PARAMETERS pkid LONG, sp TEXT(20), CID LONG, LMID LONG;\nINSERT INTO SensitiveSpecies(Park_ID, Master_PLANT_Code, CreateDate,\nCreatedBy_ID, LastModified, LastModifiedBy_ID)\nVALUES([pkid],[sp],Now,[CID],Now,[LMID]);	Used to add to park sensitive species list		2/3/2017		2/3/2017 11:01:58 AM	22	2/3/2017 11:01:58 AM	22
238	1	1	0		d_sensitive_species	SQL	d_sensitive_species		pkid:LONG|sp:STRING	PARAMETERS pkid LONG, sp TEXT(20);\nDELETE * FROM SensitiveSpecies\nWHERE \nPark_ID = [pkid]\nAND Master_PLANT_Code = [sp];	Used to remove species from park sensitive species list		2/3/2017		2/3/2017 11:02:54 AM	22	2/3/2017 11:02:54 AM	22
239	1	1	0		s_location_with_loctypeID_sensitivity	SQL	s_location_with_loctypeID_sensitivity		pkcode:STRING|scode:STRING	PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT l.ID, CollectionSourceName, LocationType, LocationName, HeadToOrientDistance_m, HeadToOrientBearing, LocationNotes, s.SiteCode, p.ParkCode, p.ID AS ParkID, Site_ID, \nSWITCH (\nLocationType ='P', \n(\nCollectionSourceName\n),\nLocationType ='T',  \n(\nCollectionSourceName\n),\nLocationType ='F',  \n(\nSELECT DISTINCT f.ID \nFROM (((Feature f\nINNER JOIN Site_Feature sf ON sf.Feature_ID = f.ID)\nINNER JOIN Site s ON s.ID = sf.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \nCStr(Feature) = CStr(CollectionSourceName)\nAND p.ParkCode = [pkcode]\nAND s.SiteCode = [scode];\n)\n) AS LocTypeID,\n(SELECT COUNT(sl.Location_ID) FROM SensitiveLocations sl WHERE sl.Location_ID = l.ID) AS IsSensitive\nFROM ((Location l\nINNER JOIN Site s ON s.ID = l.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE\np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode];	Used for location form list. Identifies ID associated w/ feature, vegtransect or vegplot and whether location is sensitive (joined to SensitiveLocations).		2/7/2017		2/7/2017 10:29:36 AM	22	11/3/2017 6:53:36 AM	22
240	1	1	0		u_site	SQL	u_site			PARAMETERS sname TEXT(50), scode TEXT(2), sdesc TEXT(255), sdir TEXT(255),flag BYTE, sid LONG;\nUPDATE Site\nSET SiteCode = [scode],\nSiteName = [sname],\nSiteDirections = [sdir],\nSiteDescription = [sdesc],\nIsActiveForProtocol = [flag]\nWHERE ID = [sid];	Updates site via Site form		10/17/2017					
241	1	1	0		s_plot_numbers	SQL	s_plot_numbers			PARAMETERS maxnum INT;\nSELECT DISTINCT PlotNum FROM AppPlot \nWHERE PlotNum = INT(PlotNum)\nAND PlotNum < [maxnum]+1;	Populates available plot #s for location form when location type = 'P' (plot)		11/2/2017		11/2/2017	22	11/8/2017	22
242	1	1	0		s_transect_numbers	SQL	s_transect_numbers			PARAMETERS maxnum INT;\nSELECT Replace(Label, 'T',''), Label\nFROM AppEnum\nWHERE EnumType = 'TransectNumber'\nAND Replace(Label,'T','') < [maxnum] + 1;	Populates available transect #s for location form when location type = 'T' (transect)		11/2/2017		11/2/2017	22	11/2/2017	22
243	1	1	0		i_site_vegtransect	SQL	i_site_vegtransect			PARAMETERS sid LONG, tid LONG;\nINSERT INTO Site_VegTransect (Site_ID, VegTransect_ID)\nVALUES ([sid],[tid]);	Adds the linking record between site & vegtransect when new vegtransects are added		11/6/2017		11/6/2017		11/6/2017	
244	1	1	0		s_plot_locations	SQL	s_plot_locations			PARAMETERS maxnum INT;\nSELECT DISTINCT PlotNum FROM AppPlot\nWHERE PlotNum < [maxnum]+1;	Populates available plot locations for location form when location type = 'P' (plot)		11/8/2017		11/8/2017		11/8/2017	
245	1	1	0		s_location_by_site	SQL	s_location_by_site			PARAMETERS pkcode TEXT(4), scode TEXT(2);\nSELECT DISTINCT\nl.ID,\nl.Site_ID,\nl.LocationType,\nl.CollectionSourceName,\nl.LocationName,\ns.SiteCode,\np.ParkCode\nFROM ((Location l\nINNER JOIN Site s ON s.ID = l.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode];	Lists locations for VegTransect form when site is highest hierarchy level		11/9/2017		11/9/2017		11/9/2017	
246	1	1	0		s_location_by_feature	SQL	s_location_by_feature			PARAMETERS pkcode TEXT(4), scode TEXT(2), feat TEXT(2);\nSELECT DISTINCT\nl.ID,\nl.Site_ID,\nl.LocationType,\nl.CollectionSourceName,\nl.LocationName,\nf.Feature,\ns.SiteCode,\np.ParkCode\nFROM (((Location l\nINNER JOIN Feature f ON f.Feature = l.LocationName\nINNER JOIN Site s ON s.ID = l.Site_ID)\nINNER JOIN Park p ON p.ID = s.Park_ID)\nWHERE \np.ParkCode = [pkcode]\nAND\ns.SiteCode = [scode]\nAND\nf.Feature = [feat]\nAND\nl.LocationType = 'F';	Lists locations for VegTransect form when feature is the highest hierarchy level		11/9/2017		11/9/2017		11/9/2017	
247	1	1	0		i_unknown	SQL	i_unknown			PARAMETERS  \nucode TEXT(15), ptype TEXT(15), pdescr TEXT(255),\nsfeat TEXT(255), ltype TEXT(50), lmarg TEXT(50), \nlch TEXT(255),sch TEXT(255), fch TEXT(255), gch TEXT(255), \nforb TEXT(10), pere TEXT(15), bguess TEXT(50),\npix BYTE, coll BYTE, collmeth TEXT(50),\nlid LONG, cid LONG;\nINSERT INTO UnknownSpecies (\nUnknownCode, PlantType,PlantDescription,SalientFeature,\nLeafType,LeafMargin, LeafCharacter,\n StemCharacter, FlowerCharacter,GeneralCharacter,\nForbGrassType, PerennialGrassType,BestGuess,\nHasPhotos,Collected,  CollectionMethod, \nLocation_ID, CollectedBy_ID\n)\nVALUES\n([ucode],[ptype],[pdescr],[sfeat],\n[ltype],[lmarg],[lch],[sch],[fch],[gch],\n[forb],[pere],[bguess],[pix],[coll],[collmeth],\n[lid],[cid]);	Adds unknown species via Unknown form		11/12/2017		11/12/2916		11/12/2017	
248	1	1	0		u_unknown	SQL	u_unknown			PARAMETERS  \nuid LONG, ucode TEXT(15), ptype TEXT(15), pdescr TEXT(255),\nsfeat TEXT(255), ltype TEXT(50), lmarg TEXT(50), \nlch TEXT(255),sch TEXT(255), fch TEXT(255), gch TEXT(255), \nforb TEXT(10), pere TEXT(15), bguess TEXT(50),\npix BYTE, coll BYTE, collmeth TEXT(50),\nlid LONG, cid LONG;\nUPDATE UnknownSpecies \nSET\nUnknownCode = [ucode], PlantType = [ptype],\nPlantDescription = [pdescr],SalientFeature = [sfeat],\nLeafType = [ltype],LeafMargin = [lmarg], LeafCharacter = [lch],\n StemCharacter = [sch], FlowerCharacter = [fch],GeneralCharacter = [gch],\nForbGrassType = [forb], PerennialGrassType = [pere],BestGuess = [bguess],\nHasPhotos = [pix],Collected = [coll],  CollectionMethod = [collmeth], \nLocation_ID = [lid], CollectedBy_ID = [cid]\nWHERE\nID = [uid];	Updates unknown species via Unknown form		11/12/2017		11/12/2017		11/12/2017	
249	1	1	0		u_unknown_identify	SQL	u_unknown_identify			PARAMETERS uid LONG, cid LONG,  \nccode TEXT(50), \nidate DATE;\nUPDATE UnknownSpecies\nSET\nConfirmedCode = [ccode],\nIdentifiedBy_ID = [cid],\nIdentifiedDate = [idate]\nWHERE\nID = [uid];	Identify unknown species via ConfirmUnknown form		11/12/2017		11/12/2017		11/12/2017	
